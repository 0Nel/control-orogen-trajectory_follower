name "trajectory_follower"
version "0.1"

import_types_from "base"

using_library "trajectory_follower"
using_library "base-lib"

import_types_from "trajectory_follower/TrajectoryFollowerTypes.hpp"

task_context "Task" do

    # Properties
    property("controller_type", "trajectory_follower/ControllerType").
            doc "Use either CONTOLLER_NO_ORIENTATION(0) or CONTROLLER_CHAINED(1)"

    property("no_orientation_controller_config", "/trajectory_follower/NoOrientationControllerConfig").
            doc "No orientation controller config"

    property("chained_controller_config", "/trajectory_follower/ChainedControllerConfig").
            doc "Chained controller config"

    property("pose_transform", "/base/Vector6d").
            doc "Tranforms robot pose to center of rotation as x-forward, y-left and z-up coordinate system"

    # Input ports
    input_port("trajectory", "std::vector</base/Trajectory>").
        doc("Trajectory the robot should follow").
        needs_buffered_connection

    input_port("robot_pose", "/base/samples/RigidBodyState").
        doc "Position and orientation of the Robot"

    # Output ports
    output_port("motion_command", "base/commands/Motion2D").
        doc "Drive command that should steer the robot to the target Pose"

    output_port("follower_data", "trajectory_follower/FollowerData").
    	doc "Pose error calculated by NURBSCurve3D"

    # Runtime state that is emitted when we reach the end of the curve, to
    # announce it to the outside world
    runtime_states :FINISHED_TRAJECTORY, :FOLLOWING_TRAJECTORY

    # Runtime error state entered when the initial stability test failed for a
    # particular trajectory. Note that the component might switch back to
    # runtime state if a new trajectory / new pose is received
    error_states :STABILITY_FAILED

    needs_configuration
    port_driven
end

deployment "test_trajectory" do
    do_not_install
    trajectory_task = task("trajectory", "Task")
    
    add_default_logger
    if !corba_enabled?
        browse trajectory_task
    end
end
