name "trajectory_follower"
version "0.1"

import_types_from "base"

using_library "trajectory_follower"
using_library "base-lib"

import_types_from "TrajectoryFollowerTypes.hpp"

task_context "Task" do
    property("controllerType", "int").
            doc "selects chainedProportionalIntegral controller to be used. Values: 0: No orientation, 1: chainedProportional, 2: chainedProportionalIntegral"

    property("forwardVelocity", "double").
            doc "forward speed of the robot"

    property("forwardLength", "double").
            doc "moving the pose estimation point forward for no orientation controller"
    
    property("gpsCenterofRotationOffset", "double").
            doc "Offset between GPS (w.r.t which Pose Estimator works) and approximated center of rotation"

    property("K0_nO", "double").
            doc "K0 gain for no orientation controller"

    property("K2_P", "double").
            doc "K2 gain for P controller"

    property("K3_P", "double").
            doc "K3 gain for P controller"

    property("K0_PI", "double").
            doc "K0 gain for PI controller"

    property("K2_PI", "double").
            doc "K2 gain for PI controller"

    property("K3_PI", "double").
            doc "K3 gain for PI controller"

    input_port("trajectory", "/base/geometry/Spline<3>").
        doc("Trajectory the robot should follow").
        needs_buffered_connection

    input_port("pose", "/base/samples/RigidBodyState").
        doc "Position and orientation of the Robot"

    output_port("motion_command", "base/MotionCommand2D").
        doc "Drive command that should steer the robot to the target Pose"

    output_port("currentCurvePoint", "trajectory_follower/CurvePoint").
    	doc "Corresponding point on the reference curve"
    
    output_port("currentPose", "trajectory_follower/RobotPose").
    	doc "Current pose of the robot"

    output_port("poseError", "trajectory_follower/TrajError").
    	doc "Pose error calculated by NURBSCurve3D"

    # Runtime state that is emitted when we reach the end of the curve, to
    # announce it to the outside world
    runtime_states :REACHED_THE_END

    # Runtime error state entered when the initial stability test failed for a
    # particular trajectory. Note that the component might switch back to
    # runtime state if a new trajectory / new pose is received
    error_states :INITIAL_STABILITY_FAILED

    needs_configuration
    port_driven
end


